{"version":3,"file":"ngx-ion-simple-mask.js","sources":["../package/src/simple-mask.ts","../package/src/directives/simple-mask.directive.ts","../package/src/pipes/simple-mask.pipe.ts","../package/src/modules/simple-mask.module.ts"],"names":[],"mappings":"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","sourcesContent":["export class SimpleMask {\n  protected patterns: any = {\n    '9': new RegExp('[0-9]'),\n    'a': new RegExp('[a-z]'),\n    'A': new RegExp('[A-Z]'),\n    'x': new RegExp('[a-zA-Z]'),\n    '*': new RegExp('[a-zA-Z0-9]'),\n    '~': new RegExp('[-\\+]')\n  };\n  mask: string;\n  fillWithExpected: boolean;\n\n  /**\n   * set new patterns\n   * @param patterns new patterns\n   * @param clear true if to clear old patterns\n   */\n  protected setPatterns(patterns: any, clear: boolean = false): void {\n    if (!patterns) {\n      return;\n    }\n    try {\n      JSON.parse(JSON.stringify(patterns));\n    } catch {\n      throw new Error('Invalid patterns object');\n    }\n    if (clear) {\n      this.patterns = {};\n    }\n    for (const key in patterns) {\n      if (patterns.hasOwnProperty(key)) {\n        this.patterns[key] = new RegExp(patterns[key]);\n      }\n    }\n  }\n\n  /**\n   * checks if the char is a pattern, that is, if is a pattern\n   * @param char value to check\n   * @returns true is a pattern, false if is not\n   */\n  protected isPattern(char: string): boolean {\n    for (const key in this.patterns) {\n      if (this.patterns.hasOwnProperty(key) && key === char) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Fits the value with the mask and return a formatted value\n   * @param value value to fit\n   * @returns formatted value\n   */\n  protected fitToMask(value: string): string {\n    let newValue = '';\n    // value size adjust to mask size\n    const size = this.mask.replace(/\\\\(?!\\\\)/g, '').length;\n    value = value.substring(0, size);\n\n    if (this.fillWithExpected) {\n      let i = 0;\n      let prefix = true;\n      for (let j = 0; j < this.mask.length; j++) {\n        // ignore next special char\n        if (this.mask[j] === '\\\\') {\n          newValue += this.mask[j + 1];\n          j++;\n          continue;\n        }\n        // test special char\n        if (this.isPattern(this.mask[j])) {\n          if (this.patterns[this.mask[j]].test(value[i])) {\n            newValue += value[i];\n            i++;\n          } else {\n            return newValue;\n          }\n        } else {\n          if (prefix && !value[i]) {\n            return newValue;\n          }\n          newValue += this.mask[j];\n          if (this.mask[j] === value[i] && prefix) {\n            i++;\n          } else {\n            prefix = false;\n          }\n        }\n      }\n    } else {\n      for (let i = 0, j = 0; j < this.mask.length && i < value.length; i++ , j++) {\n        // ignore next special char\n        if (this.mask[j] === '\\\\') {\n          newValue += this.mask[j + 1];\n          j++;\n          continue;\n        }\n        // test special char\n        if (this.isPattern(this.mask[j])) {\n          if (this.patterns[this.mask[j]].test(value[i])) {\n            newValue += value[i];\n          } else {\n            return newValue;\n          }\n        } else {\n          newValue += this.mask[j];\n  \n          if (this.mask[j] !== value[i]) {\n            i--;\n          }\n        }\n      }\n    }\n\n    return newValue;\n  }\n}","import { Directive, HostListener, Input, Injectable, Self, Renderer2 } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { SimpleMask } from './../simple-mask';\n\n@Directive({\n  selector: '[simpleMask]'\n})\n\n/** Mask used on answer component */\n@Injectable()\nexport class SimpleMaskDirective extends SimpleMask {\n  @Input('simpleMask') mask: string;\n  @Input() clearIfNotMatch: boolean;\n  @Input() fillWithExpected: boolean;\n\n  constructor(\n    private renderer: Renderer2,\n    @Self() public ngControl?: NgControl\n  ) { \n    super();\n  }\n\n  @HostListener('input', ['$event'])\n  onInput(event: KeyboardEvent): void {\n    const el: HTMLInputElement = <HTMLInputElement>event.target;\n    const value = this.fitToMask(el.value);\n    this.writeValue(value, event.target);\n  }\n\n  @HostListener('blur', ['$event'])\n  onBlur(event: Event) {\n    const el: HTMLInputElement = <HTMLInputElement>event.target;\n    if (el.value && !this.matchMask(el.value) && this.clearIfNotMatch) {\n      this.writeValue(null, event.target);\n    }\n  }\n\n  @HostListener('ionBlur', ['$event'])\n  inputOnblur(event: Event): void {\n    this.onBlur(event);\n  }\n\n  @Input('addPatterns')\n  set addPatterns(values: any) {\n    this.setPatterns(values);\n  }\n\n  @Input('newPatterns')\n  set newPatterns(values: any) {\n    this.setPatterns(values, true);\n  }\n\n  /**\n   * write the new value on input element and form control\n   * @param value value to write\n   * @param target input element\n   */\n  private writeValue(value: string | null, target: any): void {\n    target.value = value;\n    this.renderer.setProperty(target, 'value', value);\n    if (this.ngControl && this.ngControl.control) {\n      this.ngControl.control.setValue(value);\n      this.ngControl.control.markAsDirty();\n      this.ngControl.control.updateValueAndValidity();\n    }\n  }\n\n  /**\n   * Checks if the value matches with the mask and is completed\n   * @param value value to check\n   * @returns true if match, false if not match\n   */\n  private matchMask(value: string): boolean {\n    // value size adjust to mask size\n    const size = this.mask.replace(/\\\\(?!\\\\)/g, '').length;\n    value = value.substring(0, size);\n\n    return value.length === size ? true : false;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SimpleMask } from '../simple-mask';\n\n@Pipe({\n  name: 'simpleMask'\n})\nexport class SimpleMaskPipe extends SimpleMask implements PipeTransform {\n  constructor() {\n    super();\n  }\n\n  transform(value: string, mask: string, patterns?: any, clear: boolean = false): string {\n    if (mask) {\n      this.mask = mask;\n    } else {\n      throw new Error('A mask is required on simpleMask pipe');\n    }\n\n    if (patterns) {\n      this.setPatterns(patterns, clear);\n    }\n    return this.fitToMask(value);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { SimpleMaskDirective } from './../directives/simple-mask.directive';\nimport { SimpleMaskPipe } from './../pipes/simple-mask.pipe';\n\n@NgModule({\n  declarations: [\n    SimpleMaskDirective,\n    SimpleMaskPipe\n  ],\n  exports: [\n    SimpleMaskDirective,\n    SimpleMaskPipe\n  ]\n})\n\nexport class SimpleMaskModule {}\n"]}