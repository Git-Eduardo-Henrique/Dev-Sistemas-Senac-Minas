{"version":3,"file":"ngx-ion-simple-mask.js","sources":["../package/src/simple-mask.ts","../package/src/directives/simple-mask.directive.ts","../package/src/pipes/simple-mask.pipe.ts","../package/src/modules/simple-mask.module.ts"],"names":[],"mappings":"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","sourcesContent":["export class SimpleMask {\n  protected patterns: any = {\n    '9': new RegExp('[0-9]'),\n    'a': new RegExp('[a-z]'),\n    'A': new RegExp('[A-Z]'),\n    'x': new RegExp('[a-zA-Z]'),\n    '*': new RegExp('[a-zA-Z0-9]'),\n    '~': new RegExp('[-\\+]')\n  };\n  mask: string;\n  fillWithExpected: boolean;\n\n  /**\n   * set new patterns\n   * @param patterns new patterns\n   * @param clear true if to clear old patterns\n   */\n  protected setPatterns(patterns: any, clear: boolean = false): void {\n    if (!patterns) {\n      return;\n    }\n    try {\n      JSON.parse(JSON.stringify(patterns));\n    } catch {\n      throw new Error('Invalid patterns object');\n    }\n    if (clear) {\n      this.patterns = {};\n    }\n    for (const key in patterns) {\n      if (patterns.hasOwnProperty(key)) {\n        this.patterns[key] = new RegExp(patterns[key]);\n      }\n    }\n  }\n\n  /**\n   * checks if the char is a pattern, that is, if is a pattern\n   * @param char value to check\n   * @returns true is a pattern, false if is not\n   */\n  protected isPattern(char: string): boolean {\n    for (const key in this.patterns) {\n      if (this.patterns.hasOwnProperty(key) && key === char) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Fits the value with the mask and return a formatted value\n   * @param value value to fit\n   * @returns formatted value\n   */\n  protected fitToMask(value: string): string {\n    let newValue = '';\n    // value size adjust to mask size\n    const size = this.mask.replace(/\\\\(?!\\\\)/g, '').length;\n    value = value.substring(0, size);\n\n    if (this.fillWithExpected) {\n      let i = 0;\n      let prefix = true;\n      for (let j = 0; j < this.mask.length; j++) {\n        // ignore next special char\n        if (this.mask[j] === '\\\\') {\n          newValue += this.mask[j + 1];\n          j++;\n          continue;\n        }\n        // test special char\n        if (this.isPattern(this.mask[j])) {\n          if (this.patterns[this.mask[j]].test(value[i])) {\n            newValue += value[i];\n            i++;\n          } else {\n            return newValue;\n          }\n        } else {\n          if (prefix && !value[i]) {\n            return newValue;\n          }\n          newValue += this.mask[j];\n          if (this.mask[j] === value[i] && prefix) {\n            i++;\n          } else {\n            prefix = false;\n          }\n        }\n      }\n    } else {\n      for (let i = 0, j = 0; j < this.mask.length && i < value.length; i++ , j++) {\n        // ignore next special char\n        if (this.mask[j] === '\\\\') {\n          newValue += this.mask[j + 1];\n          j++;\n          continue;\n        }\n        // test special char\n        if (this.isPattern(this.mask[j])) {\n          if (this.patterns[this.mask[j]].test(value[i])) {\n            newValue += value[i];\n          } else {\n            return newValue;\n          }\n        } else {\n          newValue += this.mask[j];\n  \n          if (this.mask[j] !== value[i]) {\n            i--;\n          }\n        }\n      }\n    }\n\n    return newValue;\n  }\n}","import { Directive, HostListener, Input, Injectable, Self, Renderer2 } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { SimpleMask } from './../simple-mask';\n\n@Directive({\n  selector: '[simpleMask]'\n})\n\n/** Mask used on answer component */\n@Injectable()\nexport class SimpleMaskDirective extends SimpleMask {\n  @Input('simpleMask') mask: string;\n  @Input() clearIfNotMatch: boolean;\n  @Input() fillWithExpected: boolean;\n\n  constructor(\n    private renderer: Renderer2,\n    @Self() public ngControl?: NgControl\n  ) { \n    super();\n  }\n\n  @HostListener('input', ['$event'])\n  onInput(event: KeyboardEvent): void {\n    const el: HTMLInputElement = <HTMLInputElement>event.target;\n    const value = this.fitToMask(el.value);\n    this.writeValue(value, event.target);\n  }\n\n  @HostListener('blur', ['$event'])\n  onBlur(event: Event) {\n    const el: HTMLInputElement = <HTMLInputElement>event.target;\n    if (el.value && !this.matchMask(el.value) && this.clearIfNotMatch) {\n      this.writeValue(null, event.target);\n    }\n  }\n\n  @HostListener('ionBlur', ['$event'])\n  inputOnblur(event: Event): void {\n    this.onBlur(event);\n  }\n\n  @Input('addPatterns')\n  set addPatterns(values: any) {\n    this.setPatterns(values);\n  }\n\n  @Input('newPatterns')\n  set newPatterns(values: any) {\n    this.setPatterns(values, true);\n  }\n\n  /**\n   * write the new value on input element and form control\n   * @param value value to write\n   * @param target input element\n   */\n  private writeValue(value: string | null, target: any): void {\n    target.value = value;\n    this.renderer.setProperty(target, 'value', value);\n    if (this.ngControl && this.ngControl.control) {\n      this.ngControl.control.setValue(value);\n      this.ngControl.control.markAsDirty();\n      this.ngControl.control.updateValueAndValidity();\n    }\n  }\n\n  /**\n   * Checks if the value matches with the mask and is completed\n   * @param value value to check\n   * @returns true if match, false if not match\n   */\n  private matchMask(value: string): boolean {\n    // value size adjust to mask size\n    const size = this.mask.replace(/\\\\(?!\\\\)/g, '').length;\n    value = value.substring(0, size);\n\n    return value.length === size ? true : false;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SimpleMask } from '../simple-mask';\n\n@Pipe({\n  name: 'simpleMask'\n})\nexport class SimpleMaskPipe extends SimpleMask implements PipeTransform {\n  constructor() {\n    super();\n  }\n\n  transform(value: string, mask: string, patterns?: any, clear: boolean = false): string {\n    if (mask) {\n      this.mask = mask;\n    } else {\n      throw new Error('A mask is required on simpleMask pipe');\n    }\n\n    if (patterns) {\n      this.setPatterns(patterns, clear);\n    }\n    return this.fitToMask(value);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { SimpleMaskDirective } from './../directives/simple-mask.directive';\nimport { SimpleMaskPipe } from './../pipes/simple-mask.pipe';\n\n@NgModule({\n  declarations: [\n    SimpleMaskDirective,\n    SimpleMaskPipe\n  ],\n  exports: [\n    SimpleMaskDirective,\n    SimpleMaskPipe\n  ]\n})\n\nexport class SimpleMaskModule {}\n"]}